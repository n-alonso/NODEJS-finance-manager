openapi: 3.0.1
info:
  title: Personal Finance Manager
  version: 1.0.0
  description: >-
    Personal Finance Manager project to set your salary, manage your spending
    limits per categories or envelopes, and add expenses that can automatically
    subtract their amounts from their respective categories.  
    
    
    For more information please visit below's GitHub respository.
  license:
    name: ISC Licence
    url: https://en.wikipedia.org/wiki/ISC_license
servers:
  - url: https://pfm-api.herokuapp.com/
    description: Production server
paths:
  /salary:
    summary: Get salary data
    description: This path is used to retrieve or update your salary information
    get:
      summary: Retrieve your salary information
      description: Retrieve the current value for salary
      operationId: get_salary
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Salary'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Error'
      tags:
        - Salary
    put:
      summary: Update your salary information
      description: Change the current amount of your salary for the provided one
      operationId: update_salary
      requestBody:
        description: Update Salary Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Salary'
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Salary'
        '400':
          description: '## Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_Error'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Salary
  /envelopes:
    summary: Get envelopes data
    description: Retrieve all or create a new envelope
    get:
      summary: Get all envelopes
      description: Retrieve a list of all the currently setup envelopes
      operationId: get_envelopes
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelopes'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Envelopes
    post:
      summary: Create a new envelope
      description: Create a new envelope based on the provided values
      operationId: create_envelope
      requestBody:
        description: Create Envelope Object
        content:
          application/json:
            schema:
                properties:
                  name:
                    type: string
                  spending_limit:
                    type: number
                  spending_available:
                    type: number
                required:
                  - name
                  - spending_limit
                  - spending_available
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          description: '## Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_Error'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Envelopes
  /envelopes/{id}:
    summary: Get specific envelopes data
    description: Perform CRUD operations on a single envelope by id
    get:
      summary: Get a single envelope
      description: Retrieve a single envelope by id
      operationId: get_envelope_by_id
      parameters:
        - name: id
          in: path
          description: 'The id of the envelope.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '404':
          description: '## Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_Error'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Envelopes
    put:
      summary: Update a single envelope
      description: Update a single envelope by id with the provided one
      operationId: update_envelope_by_id
      parameters:
        - name: id
          in: path
          description: 'The id of the envelope.'
          required: true
          schema:
            type: string
      requestBody:
        description: Update Envelope Object
        content:
          application/json:
            schema:
                properties:
                  name:
                    type: string
                  spending_limit:
                    type: number
                  spending_available:
                    type: number
                required:
                  - name
                  - spending_limit
                  - spending_available
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          description: '## Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_Error'
        '404':
          description: '## Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_Error'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Envelopes
    delete:
      summary: Delete a single envelope
      description: Delete a single envelope by id
      operationId: delete_envelope_by_id
      parameters:
        - name: id
          in: path
          description: 'The id of the envelope.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Deleted the requested envelope and all associated expenses
                  deletedEnvelope:
                    type: object
                    example: Object
                  deletedExpenses:
                    type: object
                    example: Array
        '404':
          description: '## Not Found'
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/404_Error'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Envelopes
  /expenses:
    summary: Get expenses data
    description: Get/delete all your expenses or create a new one
    get:
      summary: Get a list of all your expenses
      description: Get a list of all your expenses
      operationId: get_expenses
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expenses'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Expenses
    post:
      summary: Create a new expense
      description: Create a new expense and link it to an existing envelope
      operationId: create_expense
      requestBody:
        description: Create Expense Object
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: number
                envelope_id:
                  type: number
                description:
                  type: string
              required:
                - amount
                - envelope_id
                - description
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          description: '## Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_Error'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Expenses
    delete:
      summary: Delete expenses data
      description: Delete all expenses
      operationId: delete_expenses_by_id
      parameters:
        - name: envelope_id
          in: query
          description: To delete all expenses related to this envelope
          required: false
          schema:
            type: number
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Expenses
  /expenses/{id}:
    summary: Delete a specific expense data
    description: Delete a specific expense data by id
    delete:
      summary: Delete an expense
      description: Delete an expense by id
      operationId: delete_expense_by_id
      parameters:
        - name: id
          in: path
          description: Id of the expense that you want to delete
          required: true
          schema:
            type: number
      responses:
        '200':
          description: '## Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '404':
          description: '## Not Found'
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/404_Error'
        default:
          description: '## Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Expenses
externalDocs:
  description: GitHub Repository for this project
  url: 'https://github.com/n-alonso/backend_personal-finance-manager'
components:
  schemas:
    Salary:
      type: object
      properties:
        amount: 
          type: number
      required:
       - salary
    Envelopes:
      type: array
      items:
        oneOf:
          - $ref: "#/components/schemas/Envelope"
          - $ref: "#/components/schemas/Envelope"
    Envelope:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        spending_limit:
          type: number
        spending_available:
          type: number
      required:
        - name
        - limit
        - available
    Expenses:
      type: array
      items:
        oneOf:
          - $ref: "#/components/schemas/Expense"
          - $ref: "#/components/schemas/Expense"
    Expense:
      type: object
      properties:
        id:
          type: number
        amount:
          type: number
        envelope_id:
          type: number
        description:
          type: string
      required:
        - amount
        - envelope_id
        - description
    Error:
      type: object
      properties:
        status:
          type: number
          example: 500
        error:
          type: string
          example: Error.stack
    400_Error:
      type: object
      properties:
        status:
          type: number
          example: 400
        error:
          type: string
          example: Bad request. + error.message.
    404_Error:
      type: object
      properties:
        status:
          type: number
          example: 404
        error:
          type: string
          example: Not found. + error.message.